

import unittest
from sorts import *
from random import *

class TestLab4(unittest.TestCase):

    def test_simple(self):
        nums = [23, 10]
        comps = selection_sort(nums)
        self.assertEqual(comps, 1)
        self.assertEqual(nums, [10, 23])

    def test_selection_sort(self):
        # all test cases are worst case, it will check all items even if list is already sorted
        l = [7, 5, 4, 2]
        self.assertEqual(selection_sort(l), 6)
        l1 = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
        self.assertEqual(selection_sort(l1), 55)
        l2 = [randint(0, 100) for i in range(1000)]
        self.assertEqual(selection_sort(l2), 499500)

    def test_insertion_sort(self):
        l = [5, 1, 3, 8, 2, 6, 4]
        self.assertEqual(insertion_sort(l), 9)
        # worse case example: list is in reverse order
        l1 = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
        self.assertEqual(insertion_sort(l1), 45)
        l2 = [1000-i for i in range(1000)]
        self.assertEqual(selection_sort(l2), 499500)
        # best case
        l3 = [i for i in range(32000)]
        self.assertEqual(insertion_sort(l3), 0)



if __name__ == '__main__':
    unittest.main()

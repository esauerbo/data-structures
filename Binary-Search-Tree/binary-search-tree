

from queue_array import *


class TreeNode:
    # key is an int that will determine the node's place in the tree
    # data is any value that is associated with the key
    # left is a TreeNode that has a smaller key than self
    # right is a TreeNode that has a larger key than self
    def __init__(self, key, data, left=None, right=None):
        self.key = key
        self.data = data
        self.left = left
        self.right = right


class BinarySearchTree:

    # root is a TreeNode thta is at the top of the BST
    def __init__(self):  # Returns empty BST
        self.root = None

    # returns True if tree is empty, else False
    def is_empty(self):  # BinarySearchTree -> Boolean
        return self.root == None

    # returns True if key is in a node of the tree, else False
    def search(self, key): # BinarySearchTree, int -> Boolean
        if self.root:
            return self._search(key, self.root) # Calls _search helper function
        else:
            return False

    # Helper function for search
    def _search(self, key, curr_node): # BinarySearchTree, int, TreeNode -> Boolean
        if not curr_node:
            return False
        elif curr_node.key == key:
            return True
        elif key < curr_node.key:
            return self._search(key, curr_node.left) # Rercursively calls itself going farther left
        return self._search(key, curr_node.right) # Recursively calls itself going farther right

    # inserts new node w/ key and data, If an item with the given key is already in the BST,
    #the data in the tree will be replaced with the new data
    def insert(self, key, data=None): # BinarySearchTree, int, data -> None
        if self.root: # If the tree has a root, use helper function to inert
            self._insert(key, data, self.root)
        else:  # If tree is empty, the new value is the root
            self.root = TreeNode(key, data)

    # curr_node is a TreeNode, a temporary variable as the tree is traversed
    # helper function to Insert
    def _insert(self, key, data, curr_node): # BinarySearchTree, int, data, TreeNode -> None
        if key < curr_node.key: # If key is smaller than at the current node
            if curr_node.left: # If current node has a left child
                self._insert(key, data, curr_node.left) # Calls itself until node is placed
            else: # If current node doesn't have a left child
                curr_node.left = TreeNode(key, data) # New node is the left child of current node
        elif key > curr_node.key: # If key is larger than at current node
            if curr_node.right:
                self._insert(key, data, curr_node.right)
            else:
                curr_node.right = TreeNode(key, data)
        else: # If key is equal to the current node
            curr_node.data = data


    # temp is a TreeNode that holds each node as the loop goes left
    # returns a tuple with min key and data in the BST, returns None if the tree is empty
    def find_min(self):  # BinarySearchTree -> Tuple
        if not self.root:
            return None
        temp = self.root
        while temp.left:
            temp = temp.left
        return temp.key, temp.data

    # temp is a TreeNode that holds each node as the loop goes right
    # returns a tuple with max key and data in the BST, returns None if the tree is empty
    def find_max(self):  # BinarySearchTree -> Tuple
        if not self.root:
            return None
        temp = self.root
        while temp.right:
            temp = temp.right
        return temp.key, temp.data

    # return the height of the tree, returns None if tree is empty
    def tree_height(self): # BinarySearchTree -> int
        if self.root is None:
            return None
        return self._tree_height(self.root)

    # helper function for tree_height
    def _tree_height(self, curr_node): # BinarySearchTree, TreeNode -> int
        if curr_node is None:
            return 0
        else:
            return 1 + max(self._tree_height(curr_node.left), self._tree_height(curr_node.right))


    # return Python list of BST keys representing in-order traversal of BST
    def inorder_list(self): #BinarySearchTree -> List
        keys = []
        self._inorder_list(self.root, keys)
        return keys

    # Helper function for inorder_list
    def _inorder_list(self, node, keys): #BinarySearchTree TreeNode List -> List
        if node is None:
            return
        else:
            self._inorder_list(node.left, keys)
            keys.append(node.key)
            self._inorder_list(node.right, keys)


    # return Python list of BST keys representing pre-order traversal of BST
    def preorder_list(self): # BinarySearchTree -> List
        keys = []
        self._preorder_list(self.root, keys)
        return keys


    # Helper function for preorder_list
    def _preorder_list(self, node, keys): # BinarySearchTree, TreeNode -> List
        if node is None:
            return
        else:
            keys.append(node.key)
            self._preorder_list(node.left, keys)
            self._preorder_list(node.right, keys)


    # return Python list of BST keys representing level-order traversal of BST using Queue
    def level_order_list(self): #BinarySearchTree -> List
        q = QueueArray(2500)
        keys = []
        q.enqueue(self.root)
        while not q.is_empty():
            node = q.dequeue()
            if node is not None:
                keys.append(node.key)
                if node.left is not None:
                    q.enqueue(node.left)
                if node.right is not None:
                    q.enqueue(node.right)
        return keys










import unittest
from binary_search_tree import *

class TestLab6(unittest.TestCase):
    #add your own test cases to given test cases
    def test_simple(self):
        bst = BinarySearchTree()
        self.assertTrue(bst.is_empty())
        bst.insert(10, 'stuff')
        self.assertTrue(bst.search(10))
        self.assertEqual(bst.find_min(), (10, 'stuff'))
        bst.insert(10, 'other')
        self.assertEqual(bst.find_max(), (10, 'other'))
        self.assertEqual(bst.tree_height(), 1)
        self.assertEqual(bst.inorder_list(), [10])
        self.assertEqual(bst.preorder_list(), [10])
        self.assertEqual(bst.level_order_list(), [10])

    def test_is_empty(self):
        bst = BinarySearchTree()
        self.assertTrue(bst.is_empty())
        bst.insert(10, 'stuff')
        self.assertFalse(bst.is_empty())
        bst = BinarySearchTree()
        self.assertTrue(bst.is_empty())
        bst.insert(9)
        self.assertFalse(bst.is_empty())

    def test_search(self):
        bst = BinarySearchTree()
        bst.insert(10, 'stuff')
        self.assertTrue(bst.search(10))
        self.assertFalse(bst.search(1))
        bst.insert(13, 'things')
        self.assertTrue(bst.search(13))
        self.assertFalse(bst.search(0))

    def test_insert(self):
        bst = BinarySearchTree()
        bst.insert(10, 'stuff')
        self.assertTrue(bst.search(10))
        bst.insert(13, 'things')
        self.assertEqual(bst.root.right.data, 'things')
        bst.insert(0, 'dog')
        self.assertEqual(bst.root.left.data, 'dog')
        bst.insert(-10, 'fjlka')
        self.assertEqual(bst.root.left.left.data, 'fjlka')
        bst.insert(50, 'cat')
        self.assertEqual(bst.root.right.right.data, 'cat')

    def test_find_min(self):
        bst = BinarySearchTree()
        bst.insert(10, 'stuff')
        self.assertEqual(bst.find_min(), (10, 'stuff'))
        bst.insert(13, 'things')
        self.assertEqual(bst.find_min(), (10, 'stuff'))
        bst.insert(0, 'dog')
        self.assertEqual(bst.find_min(), (0, 'dog'))
        bst.insert(-10, 'fjlka')
        self.assertEqual(bst.find_min(), (-10, 'fjlka'))
        bst.insert(50, 'cat')
        self.assertEqual(bst.find_min(), (-10, 'fjlka'))

    def test_find_max(self):
        bst = BinarySearchTree()
        bst.insert(10, 'stuff')
        self.assertEqual(bst.find_max(), (10, 'stuff'))
        bst.insert(13, 'things')
        self.assertEqual(bst.find_max(), (13, 'things'))
        bst.insert(0, 'dog')
        self.assertEqual(bst.find_max(), (13, 'things'))
        bst.insert(-10, 'fjlka')
        self.assertEqual(bst.find_max(), (13, 'things'))
        bst.insert(50, 'cat')
        self.assertEqual(bst.find_max(), (50, 'cat'))

    def test_tree_height(self):
        bst = BinarySearchTree()
        bst.insert(1, 'stuff')
        self.assertEqual(bst.tree_height(), 1)
        bst.insert(2, 'things')
        self.assertEqual(bst.tree_height(), 2)
        bst.insert(4, 'dog')
        self.assertEqual(bst.tree_height(), 3)
        bst.insert(5, 'fjlka')
        self.assertEqual(bst.tree_height(), 4)
        bst.insert(3, 'cat')
        self.assertEqual(bst.tree_height(), 4)

    def test_inorder_list(self):
        bst = BinarySearchTree()
        self.assertFalse(bst.inorder_list())
        bst.insert(10, 'stuff')
        self.assertEqual(bst.inorder_list(), [10])
        bst.insert(13, 'things')
        self.assertEqual(bst.inorder_list(), [10, 13])
        bst.insert(0, 'dog')
        self.assertEqual(bst.inorder_list(), [0, 10, 13])
        bst.insert(-10, 'fjlka')
        self.assertEqual(bst.inorder_list(), [-10, 0, 10, 13])
        bst.insert(50, 'cat')
        self.assertEqual(bst.inorder_list(), [-10, 0, 10, 13, 50])

    def test_preorder_list(self):
        bst = BinarySearchTree()
        bst.insert(1, 'stuff')
        bst.insert(2, 'things')
        bst.insert(4, 'dog')
        bst.insert(5, 'fjlka')
        bst.insert(3, 'cat')
        self.assertEqual(bst.preorder_list(), [1, 2, 4, 3, 5])
        bt = BinarySearchTree()
        self.assertFalse(bt.preorder_list())


    def test_level_order_list(self):
        bst = BinarySearchTree()
        bst.insert(1, 'stuff')
        self.assertEqual(bst.level_order_list(), [1])
        bst.insert(3, 'cat')
        bst.insert(2, 'things')
        self.assertEqual(bst.level_order_list(), [1, 3, 2])
        bst.insert(5, 'fjlka')
        self.assertEqual(bst.level_order_list(), [1, 3, 2, 5])
        bst.insert(4, 'dog')
        self.assertEqual(bst.level_order_list(), [1, 3, 2, 5, 5])


if __name__ == '__main__':
    unittest.main()

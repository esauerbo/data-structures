
# Array implementation of Max Binary Heap (Priority Queue)
class MaxHeap:

    # Constructor creating an empty heap with default capacity = 50 but allows heaps of other capacities to be created.
    def __init__(self, capacity=50):
        self.currentsize = 0
        self.capacity = capacity
        self.heaplist = [0]

    # returns True if the heap is empty, false otherwise
    # MaxHeap -> Boolean
    def is_empty(self):
        return self.get_size() == 0

     # returns True is heap is full, false otherwise
    # MaxHeap -> Boolean
    def is_full(self):
        return self.currentsize == self.capacity

    # returns the maximum number of entires the heap can hold (1 less than number of entries allocated to hold heap can hold)
    # MaxHeap -> int
    def get_capacity(self):
        return self.capacity

    # returns actual number of elements in the heap
    # MaxHeap -> int
    def get_size(self):
        return self.currentsize

    # Returns the index of the parent node of item at index i, if it exists
    # MaxHeap, int -> int
    def parent(self, i):
        if i==1:
            return None
        return i//2

    # returns max without changing the heap, returns None is heap is empty
    # MaxHeap -> item
    def peek(self):
        if self.get_size() > 0:
            return self.heaplist[1]
        return None

    # returns list of contents in the heap in internal order
    # MaxHeap -> list
    def contents(self):
        if self.get_size() > 0:
            return self.heaplist[1:]

    # builds a max heap from the items in an unsorted list using bottom up method
    # MaxHeap -> None
    def build_heap(self, alist):
        if self.get_size()+len(alist)>self.get_capacity():
            self.capacity=len(alist)
        self.currentsize = len(alist)
        self.heaplist[1:] = alist
        for i in range(len(alist)//2, 0, -1):
            self._build_heap(i)
        return self.heaplist

    # i is an index representing a node, which may or may not have left and right children
    # helper function to build_heap
    # MaxHeap, int -> None
    def _build_heap(self, i):
        left = i*2
        right = i*2+1
        if left <= self.get_size() and self.heaplist[left] > self.heaplist[i]:
            max = left
        else:
            max = i
        if right <= self.get_size() and self.heaplist[right] > self.heaplist[max]:
            max = right
        if max != i:
            self.heaplist[i], self.heaplist[max] = self.heaplist[max], self.heaplist[i]
            self._build_heap(max)

    # inserts item into the heap, returns true if successful, false if not
    # MaxHeap, item -> Boolean
    def enqueue(self, item):
        if self.get_size() >= self.get_capacity():
            return False
        self.currentsize+=1
        self.heaplist.append(item)
        self.perc_up(self.currentsize)
        return True

    # returns max and removes it from the heap and restores the heap property, returns none if heap is empty
    # MaxHeap -> item
    def dequeue(self):
        if self.get_size() > 0:
            max = self.heaplist[1]
            self.heaplist[1] = self.heaplist[self.get_size()]
            self.currentsize-=1
            self.heaplist.pop()
            self.perc_down(1)
            return max
        return None


    # i is an int that represents the current index of the item to be moved
    # moves element down to its proper location, rearranging elements as it goes
    # MaxHeap, int -> None
    def perc_down(self, i):
        while i * 2 <= self.get_size():
            if i * 2 + 1 >self.get_size():
                max = i * 2
            else:
                if self.heaplist[i * 2] > self.heaplist[i * 2 + 1]:
                    max = i * 2
                else:
                    max = i * 2 + 1
            if self.heaplist[i] < self.heaplist[max]:
                self.heaplist[i], self.heaplist[max] = self.heaplist[max], self.heaplist[i]
            i = max

    # i is an int that represents the current index of the item to be moved
    # moves element up to its proper location, rearranging elements as it goes
    # MaxHeap, int -> None
    def perc_up(self, i):
        while i // 2 > 0 :
            if self.heaplist[i] > self.heaplist[i // 2]:
                self.heaplist[i // 2], self.heaplist[i] = self.heaplist[i], self.heaplist[i // 2]
            i = i // 2


    # performs a heap sort on an input list in ascending order
    # MaxHeap, list -> list
    def heap_sort_ascending(self, alist):
        self.build_heap(alist)
        for i in range(self.get_size(), 0, -1):
            self.heaplist[1], self.heaplist[i] = self.heaplist[i], self.heaplist[1]
            self.currentsize-=1
            self._build_heap(1)
        return self.heaplist[1:]






